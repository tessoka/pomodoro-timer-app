{"version":3,"file":"static/js/66.b97ca80f.chunk.js","mappings":"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","sources":["components/Timer.jsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\r\nimport { SettingsContext, TaskListContext } from '../utilities/Context'\r\nimport AlarmTone from '../mp3/never.mp3'\r\n\r\n\r\nconst Timer = () => {\r\n\r\n  const { currentSettings, setCurrentSettings } = useContext(SettingsContext)\r\n  let { taskList, setTaskList } = useContext(TaskListContext)\r\n\r\n  const [ isRunning, setIsRunning ] = useState(false)\r\n  const [ timeLeft, setTimeLeft ] = useState(currentSettings.workTime * 60)\r\n  const [ selectedTime, setSelectedTime ] = useState(currentSettings.workTime * 60)\r\n  const [ displayTime, setDisplayTime ] = useState({})\r\n  const [ selectedType, setSelectedType ] = useState(\"Focus\")\r\n  const [ typeClicked, setTypeClicked ] = useState(true)\r\n  const [ refreshDisplayTime, setRefreshDisplayTime ] = useState(false)\r\n  const r = document.querySelector('#pb')\r\n  const [ progressValue, setProgressValue ] = useState(936)\r\n\r\n  \r\n  const calculateDisplayTime = () => {\r\n    let mins = Math.floor(timeLeft / 60).toString()\r\n    let secs = Math.floor(timeLeft - (mins * 60)).toString()\r\n    if (mins < 10) mins = \"0\" + mins.toString()\r\n    if (secs < 10) secs = \"0\" + secs.toString()\r\n    // console.log(displayTime)\r\n    setRefreshDisplayTime(!refreshDisplayTime)\r\n    setDisplayTime({mins, secs})\r\n    document.title = mins + \":\" + secs + \" - \" + selectedType\r\n  }\r\n\r\n  const handleClickType = (value) => {\r\n    setSelectedType(value)\r\n    setTypeClicked(!typeClicked)\r\n    setProgressValue(936)\r\n    r.style.setProperty('--progress', 936)\r\n\r\n    if (value === \"Focus\") {\r\n      setTimeLeft(currentSettings.workTime * 60  * 0.15)\r\n      setSelectedTime(currentSettings.workTime * 60  * 0.15)\r\n    }\r\n    if (value === \"Short Break\") {\r\n      setTimeLeft(currentSettings.shortBreakTime * 60 * 0.1)\r\n      setSelectedTime(currentSettings.shortBreakTime * 60 * 0.1)\r\n    }\r\n    if (value === \"Long Break\") {\r\n      setTimeLeft(currentSettings.longBreakTime * 60)\r\n      setSelectedTime(currentSettings.longBreakTime * 60)\r\n    }\r\n    if (isRunning) setIsRunning(false)\r\n  }\r\n\r\n  const handleClickStart = () => {\r\n    if (!isRunning) setTimeLeft(timeLeft * 1.00000000001)\r\n    setIsRunning(!isRunning)\r\n    calculateDisplayTime()\r\n  }\r\n\r\n  const updateTask = () => {\r\n    if (selectedType === \"Focus\") {\r\n      let [task] = taskList.filter(taskObj => taskObj.isActive === true)\r\n      task.runs = task.runs + 1\r\n      setTaskList([...taskList])\r\n      localStorage.setItem(\"taskList\", JSON.stringify([...taskList]))\r\n    }\r\n  }\r\n  \r\n  \r\n  useEffect(() => {\r\n\r\n    console.log(\"timeLeft\")\r\n    console.log(timeLeft)\r\n    console.log(\"progressValue\")\r\n    console.log(progressValue)\r\n    if (isRunning && timeLeft > 0) {\r\n      setProgressValue((936 - (936 / selectedTime * (selectedTime - timeLeft + 1))))\r\n      r.style.setProperty('--progress', progressValue)\r\n\r\n      calculateDisplayTime()\r\n      setTimeout(() => {\r\n        setTimeLeft(timeLeft-1)\r\n      }, 1000)\r\n    } else {\r\n      console.log(\"end of count down\")\r\n      setIsRunning(false)\r\n      if (timeLeft <= 0) {\r\n        new Audio(AlarmTone).play()\r\n        updateTask()\r\n\r\n        if (selectedType === \"Focus\") {\r\n\r\n          let runs = 0\r\n          if (sessionStorage.getItem(\"runs\") === null) {\r\n            sessionStorage.setItem(\"runs\", 1)\r\n            runs = 1\r\n          } else {\r\n            runs = JSON.parse(sessionStorage.getItem(\"runs\"))\r\n            runs = runs + 1\r\n            sessionStorage.setItem(\"runs\", `${runs}`)\r\n          }\r\n\r\n          console.log(\"modulus:\")\r\n          console.log(runs % 3)\r\n\r\n          if (runs % 3 === 0) {\r\n            handleClickType(\"Long Break\")\r\n          } else {\r\n            handleClickType(\"Short Break\")\r\n          }\r\n        }\r\n\r\n        if (selectedType !== \"Focus\") {\r\n          handleClickType(\"Focus\")\r\n        }\r\n       \r\n      }\r\n    }\r\n  }, [timeLeft])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    calculateDisplayTime()\r\n  }, [typeClicked])\r\n\r\n  return (\r\n    <div className=\"container-mid\">\r\n      <div className=\"container-mid-top\">\r\n        <button disabled={isRunning} onClick={(e) => handleClickType(e.target.innerText)}>Focus</button>\r\n        <button disabled={isRunning} onClick={(e) => handleClickType(e.target.innerText)}>Short Break</button>\r\n        <button disabled={isRunning} onClick={(e) => handleClickType(e.target.innerText)}>Long Break</button>\r\n      </div>\r\n      <div className=\"container-mid-mid\">\r\n        <div className=\"timer-progressbar\">\r\n          <div className=\"timer\">\r\n            <div className=\"timer-mins\">{displayTime.mins}</div>\r\n            <div className=\"timer-colon\">&#58;</div>\r\n            <div className=\"timer-secs\">{displayTime.secs}</div>\r\n          </div>\r\n          <div className=\"timer-type val\">\r\n            {selectedType}\r\n          </div>\r\n\r\n          <div className=\"progress-bar\">\r\n            <svg>\r\n              <circle id=\"pb\" cx=\"155\" cy=\"155\" r=\"149\" strokeLinecap=\"round\"/>\r\n            </svg>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"container-mid-bot\">\r\n        <button className=\"btn\" onClick={handleClickStart}>{isRunning ? \"Stop\" : \"Start\"}</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer"],"names":["useContext","SettingsContext","currentSettings","setCurrentSettings","TaskListContext","taskList","setTaskList","useState","isRunning","setIsRunning","workTime","timeLeft","setTimeLeft","selectedTime","setSelectedTime","displayTime","setDisplayTime","selectedType","setSelectedType","typeClicked","setTypeClicked","refreshDisplayTime","setRefreshDisplayTime","r","document","querySelector","progressValue","setProgressValue","calculateDisplayTime","mins","Math","floor","toString","secs","title","handleClickType","value","style","setProperty","shortBreakTime","longBreakTime","useEffect","console","log","setTimeout","Audio","AlarmTone","play","filter","taskObj","isActive","task","runs","localStorage","setItem","JSON","stringify","updateTask","sessionStorage","getItem","parse","className","disabled","onClick","e","target","innerText","id","cx","cy","strokeLinecap"],"sourceRoot":""}