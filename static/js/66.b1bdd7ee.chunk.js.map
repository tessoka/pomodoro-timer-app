{"version":3,"file":"static/js/66.b1bdd7ee.chunk.js","mappings":"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","sources":["components/Timer.jsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react'\r\nimport { SettingsContext, TaskListContext } from '../utilities/Context'\r\nimport AlarmTone from '../mp3/never.mp3'\r\n\r\n\r\nconst Timer = () => {\r\n\r\n  const { currentSettings } = useContext(SettingsContext)\r\n  let { taskList, setTaskList } = useContext(TaskListContext)\r\n\r\n  const [ isRunning, setIsRunning ] = useState(false)\r\n  const [ timeLeft, setTimeLeft ] = useState(currentSettings.workTime * 60)\r\n  const [ selectedTime, setSelectedTime ] = useState(currentSettings.workTime * 60)\r\n  const [ displayTime, setDisplayTime ] = useState({})\r\n  const [ selectedType, setSelectedType ] = useState(\"Focus\")\r\n  const [ typeClicked, setTypeClicked ] = useState(true)\r\n  const [ refreshDisplayTime, setRefreshDisplayTime ] = useState(false)\r\n  const r = document.querySelector('#pb')\r\n  const [ progressValue, setProgressValue ] = useState(936)\r\n\r\n  \r\n  const calculateDisplayTime = () => {\r\n    let mins = Math.floor(timeLeft / 60).toString()\r\n    let secs = Math.floor(timeLeft - (mins * 60)).toString()\r\n    if (mins < 10) mins = \"0\" + mins.toString()\r\n    if (secs < 10) secs = \"0\" + secs.toString()\r\n    setRefreshDisplayTime(!refreshDisplayTime)\r\n    setDisplayTime({mins, secs})\r\n    document.title = mins + \":\" + secs + \" - \" + selectedType\r\n  }\r\n\r\n  const handleClickType = (value) => {\r\n    setSelectedType(value)\r\n    setTypeClicked(!typeClicked)\r\n    setProgressValue(936)\r\n    r.style.setProperty('--progress', 936)\r\n\r\n    if (value === \"Focus\") {\r\n      setTimeLeft(currentSettings.workTime * 60)\r\n      setSelectedTime(currentSettings.workTime * 60)\r\n    }\r\n    if (value === \"Short Break\") {\r\n      setTimeLeft(currentSettings.shortBreakTime * 60)\r\n      setSelectedTime(currentSettings.shortBreakTime * 60)\r\n    }\r\n    if (value === \"Long Break\") {\r\n      setTimeLeft(currentSettings.longBreakTime * 60)\r\n      setSelectedTime(currentSettings.longBreakTime * 60)\r\n    }\r\n    if (isRunning) setIsRunning(false)\r\n  }\r\n\r\n  const handleClickStart = () => {\r\n    if (!isRunning) setTimeLeft(timeLeft * 1.00000000001)\r\n    setIsRunning(!isRunning)\r\n    calculateDisplayTime()\r\n  }\r\n\r\n  const updateTask = () => {\r\n    if (selectedType === \"Focus\") {\r\n      let [task] = taskList.filter(taskObj => taskObj.isActive === true)\r\n      if (task === undefined) return\r\n      task.runs = task.runs + 1\r\n      setTaskList([...taskList])\r\n      localStorage.setItem(\"taskList\", JSON.stringify([...taskList]))\r\n    }\r\n  }\r\n  \r\n  \r\n  useEffect(() => {\r\n    if (isRunning && timeLeft > 0) {\r\n      setProgressValue((936 - (936 / selectedTime * (selectedTime - timeLeft + 1))))\r\n      r.style.setProperty('--progress', progressValue)\r\n\r\n      calculateDisplayTime()\r\n      setTimeout(() => {\r\n        setTimeLeft(timeLeft-1)\r\n      }, 1000)\r\n    } else {\r\n      setIsRunning(false)\r\n      if (timeLeft <= 0) {\r\n        new Audio(AlarmTone).play()\r\n        updateTask()\r\n\r\n        if (selectedType === \"Focus\") {\r\n\r\n          let runs = 0\r\n          if (sessionStorage.getItem(\"runs\") === null) {\r\n            sessionStorage.setItem(\"runs\", 1)\r\n            runs = 1\r\n          } else {\r\n            runs = JSON.parse(sessionStorage.getItem(\"runs\"))\r\n            runs = runs + 1\r\n            sessionStorage.setItem(\"runs\", `${runs}`)\r\n          }\r\n\r\n\r\n          if (runs % 3 === 0) {\r\n            handleClickType(\"Long Break\")\r\n          } else {\r\n            handleClickType(\"Short Break\")\r\n          }\r\n        }\r\n\r\n        if (selectedType !== \"Focus\") {\r\n          handleClickType(\"Focus\")\r\n        }\r\n       \r\n      }\r\n    }\r\n  }, [timeLeft])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    calculateDisplayTime()\r\n  }, [typeClicked])\r\n\r\n  return (\r\n    <div className=\"container-mid\">\r\n      <div className=\"container-mid-top\">\r\n        <button className=\"btn-timer_type\" disabled={isRunning} onClick={(e) => handleClickType(e.target.innerText)}>Focus</button>\r\n        <button className=\"btn-timer_type\" disabled={isRunning} onClick={(e) => handleClickType(e.target.innerText)}>Short Break</button>\r\n        <button className=\"btn-timer_type\" disabled={isRunning} onClick={(e) => handleClickType(e.target.innerText)}>Long Break</button>\r\n      </div>\r\n      <div className=\"container-mid-mid\">\r\n        <div className=\"timer-progressbar\">\r\n          <div className=\"timer\">\r\n            <div className=\"timer-mins\">{displayTime.mins}</div>\r\n            <div className=\"timer-colon\">&#58;</div>\r\n            <div className=\"timer-secs\">{displayTime.secs}</div>\r\n          </div>\r\n          <div className=\"timer-type val\">\r\n            {selectedType}\r\n          </div>\r\n\r\n          <div className=\"progress-bar\">\r\n            <svg>\r\n              <circle id=\"pb\" cx=\"155\" cy=\"155\" r=\"149\" strokeLinecap=\"round\"/>\r\n            </svg>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n      <div className=\"container-mid-bot\">\r\n        <button className=\"btn\" onClick={handleClickStart}>{isRunning ? \"Stop\" : \"Start\"}</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer"],"names":["currentSettings","useContext","SettingsContext","TaskListContext","taskList","setTaskList","useState","isRunning","setIsRunning","workTime","timeLeft","setTimeLeft","selectedTime","setSelectedTime","displayTime","setDisplayTime","selectedType","setSelectedType","typeClicked","setTypeClicked","refreshDisplayTime","setRefreshDisplayTime","r","document","querySelector","progressValue","setProgressValue","calculateDisplayTime","mins","Math","floor","toString","secs","title","handleClickType","value","style","setProperty","shortBreakTime","longBreakTime","useEffect","setTimeout","Audio","AlarmTone","play","filter","taskObj","isActive","task","undefined","runs","localStorage","setItem","JSON","stringify","updateTask","sessionStorage","getItem","parse","className","disabled","onClick","e","target","innerText","id","cx","cy","strokeLinecap"],"sourceRoot":""}